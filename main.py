import time
import random
import requests
from faker import Faker

WEBHOOK_URL = "https://b24-lkgkv0.bitrix24.ru/rest/1/90qyb3sbcjem26bq/"
NUM_CONTACTS = 100
NUM_COMPANIES = 100

fake = Faker("ru_RU")


def bx_call(method, params=None):
    url = f"{WEBHOOK_URL}{method}.json"
    try:
        resp = requests.post(url, json=params or {}, timeout=30)
        resp.raise_for_status()
        data = resp.json()

        if "error" in data:
            print(f"API Error in {method}: {data['error']}")
            return None

        return data
    except Exception as e:
        print(f"Error calling {method}: {e}")
        return None


def create_contact():
    fields = {
        "NAME": fake.first_name(),
        "LAST_NAME": fake.last_name(),
        "PHONE": [{"VALUE": fake.phone_number(), "VALUE_TYPE": "WORK"}],
        "EMAIL": [{"VALUE": fake.company_email(), "VALUE_TYPE": "WORK"}],
        "POST": fake.job()
    }
    payload = {"fields": fields, "params": {"REGISTER_SONET_EVENT": "N"}}
    res = bx_call("crm.contact.add", payload)
    return res.get("result") if res and "result" in res else None


def create_company():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
    fields = {
        "TITLE": fake.company(),
        "PHONE": [{"VALUE": fake.phone_number(), "VALUE_TYPE": "WORK"}],
        "EMAIL": [{"VALUE": fake.company_email(), "VALUE_TYPE": "WORK"}]
    }
    payload = {"fields": fields, "params": {"REGISTER_SONET_EVENT": "N"}}
    res = bx_call("crm.company.add", payload)
    return res.get("result") if res and "result" in res else None


def link_contact_to_company(contact_id, company_id):
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ COMPANY_ID"""
    try:
        payload = {
            "id": int(contact_id),
            "fields": {
                "COMPANY_ID": int(company_id)
            },
            "params": {"REGISTER_SONET_EVENT": "N"}
        }

        res = bx_call("crm.contact.update", payload)
        if res and "result" in res and res["result"]:
            print(f"‚úì –ö–æ–Ω—Ç–∞–∫—Ç {contact_id} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}")
            return True
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id} –∫ –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}")
            print(f"   –û—Ç–≤–µ—Ç API: {res}")
            return False

    except Exception as e:
        print(f"‚úó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id} –∫ –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–∏—Ç—Ä–∏–∫—Å 24...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    print("\nüì± –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–∞–∫—Ç—ã...")
    contact_ids = []
    for i in range(NUM_CONTACTS):
        cid = create_contact()
        if cid:
            contact_ids.append(cid)
            if (i + 1) % 10 == 0:
                print(f"–°–æ–∑–¥–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contact_ids)}/{NUM_CONTACTS}")
        time.sleep(0.05)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contact_ids)}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π
    print("\nüè¢ –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–∞–Ω–∏–∏...")
    company_ids = []
    for i in range(NUM_COMPANIES):
        coid = create_company()
        if coid:
            company_ids.append(coid)
            if (i + 1) % 10 == 0:
                print(f"–°–æ–∑–¥–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(company_ids)}/{NUM_COMPANIES}")
        time.sleep(0.05)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(company_ids)}")

    print("\nüîó –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º...")

    random.shuffle(contact_ids)
    random.shuffle(company_ids)

    contacts_per_company = len(contact_ids) // len(company_ids)
    remainder = len(contact_ids) % len(company_ids)

    print(f"üìä –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
    print(f"   - –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contact_ids)}")
    print(f"   - –ö–æ–º–ø–∞–Ω–∏–π: {len(company_ids)}")
    print(f"   - –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é: {contacts_per_company}")
    print(f"   - –û—Å—Ç–∞—Ç–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {remainder}")

    successful_links = 0
    contact_index = 0

    for i, company_id in enumerate(company_ids):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        contacts_for_this_company = contacts_per_company
        if i < remainder:  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –ø–µ—Ä–≤—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º
            contacts_for_this_company += 1

        print(
            f"\n–ö–æ–º–ø–∞–Ω–∏—è {i + 1}/{len(company_ids)} (ID: {company_id}): –Ω–∞–∑–Ω–∞—á–∞–µ–º {contacts_for_this_company} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        company_contacts = []
        for j in range(contacts_for_this_company):
            if contact_index < len(contact_ids):
                contact_id = contact_ids[contact_index]
                company_contacts.append(contact_id)
                contact_index += 1

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫ –∫–æ–º–ø–∞–Ω–∏–∏
        for contact_id in company_contacts:
            if link_contact_to_company(contact_id, company_id):
                successful_links += 1
                print(f"  ‚úì –ö–æ–Ω—Ç–∞–∫—Ç {contact_id} ‚Üí –ö–æ–º–ø–∞–Ω–∏—è {company_id}")
            else:
                print(f"  ‚úó –û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–∞–∫—Ç {contact_id} ‚Üí –ö–æ–º–ø–∞–Ω–∏—è {company_id}")
            time.sleep(0.05)

        print(f"  –ò—Ç–æ–≥–æ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}: {len(company_contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(contact_ids)}")
    print(f"   - –ö–æ–º–ø–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: {len(company_ids)}")
    print(f"   - –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ: {successful_links}")
    print(f"   - –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {contact_index}")