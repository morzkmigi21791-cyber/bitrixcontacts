#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24
"""

import requests
import json
import sys
from config import BITRIX24_CLIENT_ID, BITRIX24_CLIENT_SECRET, BITRIX24_REDIRECT_URI

def test_oauth_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OAuth –ø–æ—Ç–æ–∫"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OAuth –ø–æ—Ç–æ–∫–∞...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    from oauth_handler import Bitrix24OAuth
    oauth = Bitrix24OAuth()
    
    test_domain = "test-domain.bitrix24.ru"
    auth_url = oauth.get_auth_url(test_domain)
    
    print(f"‚úÖ URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {auth_url[:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    assert "response_type=code" in auth_url
    assert f"client_id={BITRIX24_CLIENT_ID}" in auth_url
    assert f"redirect_uri={BITRIX24_REDIRECT_URI}" in auth_url
    assert f"state={test_domain}" in auth_url
    
    print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã OAuth –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    return True

def test_app_handler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üè¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –∫–Ω–æ–ø–∫–∏
    from bitrix_app_handler import Bitrix24AppHandler
    app_handler = Bitrix24AppHandler()
    
    button_html = app_handler.create_button_html("CRM_LEAD_LIST_MENU")
    assert "bitrix24-contacts-button" in button_html
    assert "amusingly-awaited-starling.cloudpub.ru" in button_html
    
    print("‚úÖ HTML –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    placement_handler = app_handler.create_placement_handler("CRM_LEAD_LIST_MENU")
    assert "BX.ready" in placement_handler
    assert "CRM_LEAD_LIST_MENU" in placement_handler
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    return True

def test_placement_binding():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π...")
    
    from placement_bind import Bitrix24PlacementBinder
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–∏–Ω–¥–µ—Ä
    test_domain = "test-domain.bitrix24.ru"
    test_token = "test-token"
    binder = Bitrix24PlacementBinder(test_domain, test_token)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL API
    expected_url = f"https://{test_domain}/rest/1/{test_token}"
    assert binder.api_url == expected_url
    
    print("‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    return True

def test_server_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö endpoints"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö endpoints...")
    
    base_url = "https://amusingly-awaited-starling.cloudpub.ru"
    endpoints = [
        "/api/bitrix24",
        "/bitrix/oauth/install",
        "/bitrix/oauth/callback"
    ]
    
    for endpoint in endpoints:
        try:
            url = f"{base_url}{endpoint}"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                print(f"‚úÖ {endpoint} - –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è  {endpoint} - —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {endpoint} - –æ—à–∏–±–∫–∞: {e}")
    
    return True

def test_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    from config import (
        BITRIX24_CLIENT_ID, 
        BITRIX24_CLIENT_SECRET, 
        BITRIX24_REDIRECT_URI,
        PORT, HOST
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    assert BITRIX24_CLIENT_ID, "BITRIX24_CLIENT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    assert BITRIX24_CLIENT_SECRET, "BITRIX24_CLIENT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    assert BITRIX24_REDIRECT_URI, "BITRIX24_REDIRECT_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    print(f"‚úÖ Client ID: {BITRIX24_CLIENT_ID}")
    print(f"‚úÖ Redirect URI: {BITRIX24_REDIRECT_URI}")
    print(f"‚úÖ Server: {HOST}:{PORT}")
    
    return True

def test_webhook_handler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    print("üîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ webhook
    test_webhook_data = {
        "event": "ONCRMLEADADD",
        "data": {
            "FIELDS": {
                "ID": "123",
                "TITLE": "–¢–µ—Å—Ç–æ–≤—ã–π –ª–∏–¥"
            }
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
    event_type = test_webhook_data.get('event', '')
    assert event_type == "ONCRMLEADADD"
    
    lead_id = test_webhook_data.get('data', {}).get('FIELDS', {}).get('ID')
    assert lead_id == "123"
    
    print("‚úÖ Webhook –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24\n")
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("OAuth –ø–æ—Ç–æ–∫", test_oauth_flow),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", test_app_handler),
        ("–ü—Ä–∏–≤—è–∑–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π", test_placement_binding),
        ("Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫", test_webhook_handler),
        ("–°–µ—Ä–≤–µ—Ä–Ω—ã–µ endpoints", test_server_endpoints)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            print(f"\nüìã {test_name}:")
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return 1

if __name__ == "__main__":
    sys.exit(main())


